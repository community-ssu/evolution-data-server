diff -urNp evolution-data-server.org/addressbook/backends/file/Makefile.am evolution-data-server/addressbook/backends/file/Makefile.am
--- evolution-data-server.org/addressbook/backends/file/Makefile.am	2008-09-08 14:06:42.000000000 +0300
+++ evolution-data-server/addressbook/backends/file/Makefile.am	2008-09-08 14:08:13.000000000 +0300
@@ -16,7 +16,8 @@ libebookbackendfile_la_SOURCES =			\
 	e-book-backend-file-index.h				\
 	e-book-backend-file-factory.c			\
 	$(top_srcdir)/libedataserver/e-db3-utils.c	\
-	$(top_srcdir)/libedataserver/e-dbhash.c
+	$(top_srcdir)/libedataserver/e-dbhash.c		\
+	$(top_srcdir)/libedataserver/md5-utils.c
 
 libebookbackendfile_la_LIBADD =						\
 	$(top_builddir)/addressbook/libebook/libebook-$(API_VERSION).la		\
diff -urNp evolution-data-server.org/addressbook/backends/file/e-book-backend-file.c evolution-data-server/addressbook/backends/file/e-book-backend-file.c
--- evolution-data-server.org/addressbook/backends/file/e-book-backend-file.c	2008-09-08 14:06:42.000000000 +0300
+++ evolution-data-server/addressbook/backends/file/e-book-backend-file.c	2008-09-08 14:08:08.000000000 +0300
@@ -42,6 +42,7 @@
 
 #include "libedataserver/e-dbhash.h"
 #include "libedataserver/e-db3-utils.h"
+#include "libedataserver/md5-utils.h"
 #include "libedataserver/e-data-server-util.h"
 #include "libedataserver/e-flag.h"
 
@@ -1114,6 +1115,172 @@ file_errcall (const char *buf1, char *bu
 	global_env.had_error = TRUE;
 }
 
+#define PREINSTALL_MD5FILE "md5sums"
+#define PREINSTALL_MD5DIRP1 ".config"
+#define PREINSTALL_MD5DIRP2 "evolution-data-server"
+#define PREINSTALL_DIR "/usr/share/evolution-data-server"
+#define MD5LEN 32
+#define MD5RAWLEN 16
+
+static gchar md5conv[] = "0123456789abcdef";
+#define conv_to_digit(x) md5conv[(x)]
+
+static gboolean
+get_contact_from_string (gchar *str, guint *start, guint *end)
+{
+	gboolean found = FALSE;
+
+	*start = *end;
+	
+	for (; *start <= strlen (str) && str[*start] != 'B'; (*start)++);
+	*end = *start+1;
+
+	for (; *end <= strlen (str); (*end)++) {
+		if (!g_ascii_strncasecmp (&str[*end], "END:VCARD", 8)) {
+			found = TRUE;
+			*end += 8;
+			break;
+		}
+	}
+	return found;
+}
+
+static gboolean
+check_md5sum (const gchar *name)
+{
+	const gchar *home;
+	gint i = 0;
+	gint fd = -1;
+	gchar *md5file;
+	gchar buffer[17];
+	ssize_t readed;
+	gboolean retval = TRUE;
+	guchar md5raw[MD5RAWLEN] = { '\0', };
+	gchar md5[MD5LEN+1] = { '\0', };
+	gchar *pmd5;
+
+	if (!name) {
+		return FALSE;
+	}
+
+	home = getenv ("HOME");
+	if (!home) {
+		return FALSE;
+	}
+
+	md5file = g_build_filename (home, PREINSTALL_MD5DIRP1,
+				    PREINSTALL_MD5DIRP2,  
+				    PREINSTALL_MD5FILE, NULL);
+	if (!md5file) {
+		return FALSE;
+	}
+
+	/* Tests if md5-dir and file exists */
+	if ((fd = g_open (md5file, O_RDWR|O_APPEND|O_CREAT, S_IRUSR|S_IWUSR)) < 0) {
+		gchar *dir;
+
+		/* do not care about errors */
+		dir = g_build_filename (home, PREINSTALL_MD5DIRP1, NULL);
+		g_mkdir (dir, S_IRUSR|S_IWUSR|S_IXUSR);
+		g_free (dir);
+
+		dir = g_build_filename (home, PREINSTALL_MD5DIRP1, 
+					PREINSTALL_MD5DIRP2, NULL);
+		g_mkdir (dir, S_IRUSR|S_IWUSR|S_IXUSR);
+		g_free (dir);
+
+		if ((fd = g_open (md5file, O_RDWR|O_APPEND|O_CREAT, S_IRUSR|S_IWUSR)) < 0) {
+			g_free (md5file);
+			return FALSE;
+		}
+	}
+	g_free (md5file);
+
+	/* get md5 of the string (file) */
+	md5_get_digest_from_file (name, md5raw);
+
+	pmd5 = md5;
+	for (i=0; i < MD5RAWLEN; i++) {
+		*pmd5++ = conv_to_digit ((int)md5raw[i] >> 4); 
+		*pmd5++ = conv_to_digit (((int)md5raw[i] & 15)); 
+	}
+	*pmd5 = '\0';
+
+	while ((readed = read (fd, buffer, MD5LEN) > 0)) {
+		/*
+		g_debug (G_STRLOC "buffer: %s", buffer);
+		g_debug (G_STRLOC "md5: %s", md5);
+		*/
+		if (strncmp (md5, buffer, MD5LEN))
+			continue;
+		retval = FALSE;
+		break;
+	}
+
+	if (retval == TRUE) {
+		lseek (fd, 0, SEEK_END);
+		write (fd, md5, MD5LEN);
+	}
+
+	close (fd);
+
+	return retval;
+}
+
+static void
+install_pre_installed_vcards (EBookBackend *backend)
+{
+	GDir *directory;
+	const gchar *name;
+	EBookBackendFile *bf = E_BOOK_BACKEND_FILE (backend);
+
+	/* Get files from pre-install directory */
+	directory = g_dir_open (PREINSTALL_DIR, 0, NULL);
+	if (directory == NULL) {
+		return;
+	}
+
+	/* Read directorys filenames */
+	while ((name = g_dir_read_name (directory)) != NULL) {
+		gchar *path_plus_name;
+		gchar *vctmpstr = NULL;
+		guint end = 0;
+		guint start = 0;
+		EContact *contact;
+		gchar *vcard = NULL;
+
+		if (!g_str_has_suffix (name, ".vcf")) {
+			continue;
+		};
+
+		path_plus_name = g_build_filename (PREINSTALL_DIR, name, NULL);
+
+		if (!check_md5sum (path_plus_name)) {
+			g_free (path_plus_name);
+			return;
+		}
+
+		if(!g_file_get_contents (path_plus_name, &vcard, NULL, NULL)) {
+			g_free (path_plus_name);
+			return;
+		}
+		g_free (path_plus_name);
+
+		while ((get_contact_from_string (vcard, &start, &end)) != FALSE) {
+			vctmpstr = g_strndup (vcard+start, end-start+1);
+			if (vctmpstr) {
+				EBookBackendSyncStatus status;
+				status = do_create (bf, vctmpstr, &contact);
+				g_free (vctmpstr);
+				if (status == GNOME_Evolution_Addressbook_Success) {
+					e_book_backend_file_index_add_contact (bf->priv->index, contact);
+				}
+			}
+		}
+	}
+	g_dir_close (directory);
+
+}
 
 static GNOME_Evolution_Addressbook_CallStatus
 e_book_backend_file_load_source (EBookBackend           *backend,
@@ -1313,6 +1480,13 @@ e_book_backend_file_load_source (EBookBa
 
 	e_book_backend_set_is_loaded (backend, TRUE);
 	e_book_backend_set_is_writable (backend, writable);
+
+	if (bf->priv->file_db) {
+		install_pre_installed_vcards (backend);
+	} else {
+		g_warning ("No file_db");
+	}
+
 	return GNOME_Evolution_Addressbook_Success;
 }
 
