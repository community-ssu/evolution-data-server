Index: evolution-data-server.build/addressbook/libebook-dbus/e-vcard.c
===================================================================
--- evolution-data-server.build.orig/addressbook/libebook-dbus/e-vcard.c	2008-08-12 14:53:28.000000000 +0100
+++ evolution-data-server.build/addressbook/libebook-dbus/e-vcard.c	2008-08-12 15:24:41.000000000 +0100
@@ -224,16 +224,17 @@
 	}
 
 
-static void
+static gboolean
 read_attribute_value (EVCardAttribute *attr, const char **p, gboolean quoted_printable)
 {
 	const char *lp = *p;
 	GString *str;
 	const char *chunk_start = NULL;
+	gint count = 0;
 
 	/* read in the value */
 	str = g_string_sized_new (16);
-	while (*lp) {
+	while (*lp && (count < 40)) {
 		//g_printerr("(%c)", *lp);
 		if (*lp == '=' && quoted_printable) {
 			char a, b;
@@ -288,6 +289,7 @@
 			e_vcard_attribute_add_value (attr, str->str);
 			g_string_assign (str, "");
 			lp = g_utf8_next_char(lp);
+			count++;
 		}
 		UNFOLD_CHUNK(lp)
 		else {
@@ -298,6 +300,14 @@
 			lp = g_utf8_next_char(lp);
 		}
 	}
+
+	if (count == 40)
+	{	
+		g_warning (G_STRLOC ": Excessive VCARD detected. "
+		    "More than 40 values for attribute.");
+		return FALSE;
+	}
+
 	WRITE_CHUNK;
 	if (str) {
 		e_vcard_attribute_add_value (attr, str->str);
@@ -305,17 +315,20 @@
 	}
 
 	*p = lp;
+	return TRUE;
 }
 
-static void
+static gboolean
 read_attribute_params (EVCardAttribute *attr, const char **p, gboolean *quoted_printable)
 {
 	const char *lp = *p;
 	GString *str;
 	EVCardAttributeParam *param = NULL;
 	gboolean in_quote = FALSE;
+	gint count = 0;
+
 	str = g_string_sized_new (16);
-	while (*lp != '\0') {
+	while (*lp != '\0' && (count < 20)) {
 		if (*lp == '"') {
 			in_quote = !in_quote;
 			lp = g_utf8_next_char (lp);
@@ -429,6 +442,7 @@
 			}
 			if (param && !comma) {
 				e_vcard_attribute_add_param (attr, param);
+				count++;
 				param = NULL;
 			}
 			if (colon)
@@ -448,12 +462,21 @@
 		}
 	}
 
+	if (count == 20)
+	{
+		g_warning (G_STRLOC ": Excessive VCARD detected. "
+		    "More than 20 parameters found.");
+		return FALSE;
+	}
+
 	if (str)
 		g_string_free (str, TRUE);
 
 	attr->params = g_list_reverse (attr->params);
 	
 	*p = lp;
+
+	return TRUE;
 }
 
 /* reads an entire attribute from the input buffer, leaving p pointing
@@ -469,10 +492,11 @@
 	char c;
 	gboolean is_qp = FALSE;
 	gunichar uc;
+	gint count = 0;
 
 	/* first read in the group/name */
 	str = g_string_sized_new (16);
-	while ((c = *lp)) {
+	while ((c = *lp) && (count < 200)) {
 		if (c == ':' || c == ';') {
 			if (str->len != 0) {
 				/* we've got a name, break out to the value/attribute parsing */
@@ -517,6 +541,13 @@
 		}
 
 		lp = g_utf8_next_char(lp);
+		count++;
+	}
+
+	if (count == 200) {
+		g_warning (G_STRLOC ": Excessive VCARD detected. " 
+		    "More than 200 characters before attribute parameters.");
+		goto lose;
 	}
 
 	if (!attr_name) {
@@ -530,14 +561,19 @@
 	if (*lp == ';') {
 		/* skip past the ';' */
 		lp = g_utf8_next_char(lp);
-		read_attribute_params (attr, &lp, &is_qp);
+		if (!read_attribute_params (attr, &lp, &is_qp))
+			goto lose;
+
 		if (is_qp)
 			attr->encoding = EVC_ENCODING_RAW;
 	}
 	if (*lp == ':') {
 		/* skip past the ':' */
 		lp = g_utf8_next_char(lp);
-		read_attribute_value (attr, &lp, is_qp);
+		if (!read_attribute_value (attr, &lp, is_qp))
+		{
+			goto lose;
+		}
 	}
 
 	*p = lp;
@@ -557,6 +593,7 @@
 parse (EVCard *evc, const char *str, gboolean ignore_uid)
 {
 	EVCardAttribute *attr;
+	gint count = 0;
 
 	if (str == NULL)
 		return;
@@ -572,7 +609,7 @@
 			e_vcard_add_attribute (evc, attr);
 	}
 	
-	while ((attr = read_attribute (&str))) {
+	while ((attr = read_attribute (&str)) && (count < 50)) {
 		if (G_UNLIKELY (0 == strcmp (attr->name, "END")))
 			break;
 
@@ -580,6 +617,13 @@
 			continue;
 
 		e_vcard_add_attribute (evc, attr);
+		count++;
+	}
+
+	if (count == 50)
+	{
+		 g_warning (G_STRLOC ": Excessive VCARD detected. "
+		     "More than 50 attributes detected");
 	}
 
 	if (!attr || attr->group || strcmp (attr->name, "END"))
