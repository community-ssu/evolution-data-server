Index: evolution-data-server/addressbook/libebook-dbus/e-book-view.c
===================================================================
--- evolution-data-server.orig/addressbook/libebook-dbus/e-book-view.c	2008-07-29 22:44:40.000000000 +0200
+++ evolution-data-server/addressbook/libebook-dbus/e-book-view.c	2008-07-29 23:00:18.000000000 +0200
@@ -37,6 +37,7 @@
 
   gboolean running : 1;
   gboolean freezable : 1;
+  gboolean parse_vcards : 1;
 };
 
 enum {
@@ -122,6 +123,7 @@
   priv->running = FALSE;
 
   view->priv = priv;
+  priv->parse_vcards = TRUE;
 }
 
 static void
@@ -134,43 +136,45 @@
 }
 
 static void
-contacts_added_cb (DBusGProxy *proxy, const char **vcards, EBookView *book_view)
+contacts_added_or_changed (EBookView   *book_view,
+                           guint        signal_id,
+                           const char **vcards)
 {
-  const char **p;
   GList *contacts = NULL;
+  const char **p;
+  EContact *ec;
 
   if (!book_view->priv->running)
     return;
 
-  for (p = vcards; *p; p++) {
-    contacts = g_list_prepend (contacts, e_contact_new_from_vcard (*p));
-  }
-  contacts = g_list_reverse (contacts);
+  if (!book_view->priv->parse_vcards) {
+    g_signal_emit (book_view, signal_id, 0, vcards);
+  } else {
+    for (p = vcards; *p; p+= 2) {
+      ec = e_contact_new ();
+      e_vcard_construct_with_uid (E_VCARD (ec), p[0], p[1]);
+      contacts = g_list_prepend (contacts, ec);
+    }
 
-  g_signal_emit (book_view, signals[CONTACTS_ADDED], 0, contacts);
+    contacts = g_list_reverse (contacts);
 
-  g_list_foreach (contacts, (GFunc)g_object_unref, NULL);
-  g_list_free (contacts);
+    g_signal_emit (book_view, signal_id, 0, contacts);
+
+    g_list_foreach (contacts, (GFunc)g_object_unref, NULL);
+    g_list_free (contacts);
+  }
 }
 
 static void
-contacts_changed_cb (DBusGProxy *proxy, const char **vcards, EBookView *book_view)
+contacts_added_cb (DBusGProxy *proxy, const char **vcards, EBookView *book_view)
 {
-  const char **p;
-  GList *contacts = NULL;
-
-  if (!book_view->priv->running)
-    return;
-
-  for (p = vcards; *p; p++) {
-    contacts = g_list_prepend (contacts, e_contact_new_from_vcard (*p));
-  }
-  contacts = g_list_reverse (contacts);
-
-  g_signal_emit (book_view, signals[CONTACTS_CHANGED], 0, contacts);
+  contacts_added_or_changed (book_view, signals[CONTACTS_ADDED], vcards);
+}
 
-  g_list_foreach (contacts, (GFunc)g_object_unref, NULL);
-  g_list_free (contacts);
+static void
+contacts_changed_cb (DBusGProxy *proxy, const char **vcards, EBookView *book_view)
+{
+  contacts_added_or_changed (book_view, signals[CONTACTS_CHANGED], vcards);
 }
 
 static void
@@ -182,15 +186,19 @@
   if (!book_view->priv->running)
     return;
 
-  for (p = ids; *p; p++) {
-    list = g_list_prepend (list, (char*)*p);
-  }
-  list = g_list_reverse (list);
+  if (!book_view->priv->parse_vcards) {
+    g_signal_emit (book_view, signals[CONTACTS_REMOVED], 0, ids);
+  } else {
+    for (p = ids; *p; p++) {
+      list = g_list_prepend (list, (char*)*p);
+    }
+    list = g_list_reverse (list);
 
-  g_signal_emit (book_view, signals[CONTACTS_REMOVED], 0, list);
+    g_signal_emit (book_view, signals[CONTACTS_REMOVED], 0, list);
 
-  /* No need to free the values, our caller will */
-  g_list_free (list);
+    /* No need to free the values, our caller will */
+    g_list_free (list);
+  }
 }
 
 static void
@@ -369,3 +377,29 @@
     }
   }
 }
+
+/**
+ * e_book_view_set_parse_vcards:
+ * @book_view: an #EBookView
+ * @parse_vcards: whether to parse the vcards into #EContact objects
+ *
+ * Tells the @book_view how to send vCards in its signals. When
+ * @parse_vcards is %FALSE the unparsed vCards are emitted as %NULL terminated
+ * array of strings. The receiver is responsible for parsing them. When
+ * passing %TRUE a #GList of #EContact instances is emitted. This is the
+ * default behavior.
+ **/
+void
+e_book_view_set_parse_vcards (EBookView *book_view, gboolean parse_vcards)
+{
+  g_return_if_fail (E_IS_BOOK_VIEW (book_view));
+  book_view->priv->parse_vcards = parse_vcards;
+}
+
+gboolean
+e_book_view_get_parse_vcards (EBookView *book_view)
+{
+  g_return_val_if_fail (E_IS_BOOK_VIEW (book_view), TRUE);
+  return book_view->priv->parse_vcards;
+}
+
Index: evolution-data-server/addressbook/libebook-dbus/e-book-view.h
===================================================================
--- evolution-data-server.orig/addressbook/libebook-dbus/e-book-view.h	2008-07-29 22:44:40.000000000 +0200
+++ evolution-data-server/addressbook/libebook-dbus/e-book-view.h	2008-07-29 23:00:18.000000000 +0200
@@ -77,6 +77,9 @@
 void               e_book_view_set_freezable          (EBookView *book_view, gboolean freezable);
 gboolean           e_book_view_is_freezable           (EBookView *book_view);
 
+void               e_book_view_set_parse_vcards       (EBookView *book_view, gboolean emit_vcards);
+gboolean           e_book_view_get_parse_vcards       (EBookView *book_view);
+
 void               e_book_view_set_sort_order         (EBookView *book_view, const gchar *query_term);
 
 G_END_DECLS
Index: evolution-data-server/addressbook/libedata-book-dbus/e-data-book-view.c
===================================================================
--- evolution-data-server.orig/addressbook/libedata-book-dbus/e-data-book-view.c	2008-07-29 22:46:35.000000000 +0200
+++ evolution-data-server/addressbook/libedata-book-dbus/e-data-book-view.c	2008-07-29 23:00:18.000000000 +0200
@@ -143,8 +143,9 @@
   priv->running = FALSE;
   priv->pending_mutex = g_mutex_new ();
 
-  priv->adds = g_ptr_array_sized_new (THRESHOLD);
-  priv->changes = g_ptr_array_sized_new (THRESHOLD);
+  /* THRESHOLD * 2: we store UID and vCard */
+  priv->adds = g_ptr_array_sized_new (THRESHOLD * 2);
+  priv->changes = g_ptr_array_sized_new (THRESHOLD * 2);
   priv->removes = g_ptr_array_sized_new (THRESHOLD);
 
   priv->ids = g_hash_table_new_full (g_str_hash, g_str_equal,
@@ -506,24 +507,25 @@
 }
 
 static void
-notify_change (EDataBookView *view, char *vcard)
+notify_change (EDataBookView *view, const char *id, char *vcard)
 {
   EDataBookViewPrivate *priv = view->priv;
   send_pending_adds (view);
   send_pending_removes (view);
 
   g_ptr_array_add (priv->changes, vcard);
+  g_ptr_array_add (priv->changes, g_strdup (id));
 }
 
 static void
-notify_remove (EDataBookView *view, char *id)
+notify_remove (EDataBookView *view, const char *id)
 {
   EDataBookViewPrivate *priv = view->priv;
 
   send_pending_adds (view);
   send_pending_changes (view);
 
-  g_ptr_array_add (priv->removes, id);
+  g_ptr_array_add (priv->removes, g_strdup (id));
   g_hash_table_remove (priv->ids, id);
 }
 
@@ -531,11 +533,11 @@
 notify_add (EDataBookView *view, const char *id, char *vcard)
 {
   EDataBookViewPrivate *priv = view->priv;
+
   send_pending_changes (view);
   send_pending_removes (view);
 
-  if (priv->adds->len == THRESHOLD) {
-
+  if (priv->adds->len == 2 * THRESHOLD) {
     if (priv->freezable)
     {
       g_mutex_lock (priv->thaw_lock);
@@ -547,7 +549,10 @@
       send_pending_adds (view);
     }
   }
+
   g_ptr_array_add (priv->adds, vcard);
+  g_ptr_array_add (priv->adds, g_strdup (id));
+
   g_hash_table_insert (priv->ids, g_strdup (id),
                        GUINT_TO_POINTER (1));
 }
@@ -577,12 +582,12 @@
                                EVC_FORMAT_VCARD_30);
 
     if (currently_in_view)
-      notify_change (book_view, vcard);
+      notify_change (book_view, id, vcard);
     else
       notify_add (book_view, id, vcard);
   } else {
     if (currently_in_view)
-      notify_remove (book_view, g_strdup (id));
+      notify_remove (book_view, id);
     /* else nothing; we're removing a card that wasn't there */
   }
 
@@ -611,12 +616,12 @@
 
   if (want_in_view) {
     if (currently_in_view)
-      notify_change (book_view, vcard);
+      notify_change (book_view, id, vcard);
     else
       notify_add (book_view, id, vcard);
   } else {
     if (currently_in_view)
-      notify_remove (book_view, g_strdup (id));
+      notify_remove (book_view, id);
     else
       /* else nothing; we're removing a card that wasn't there */
       g_free (vcard);
@@ -642,7 +647,7 @@
     g_hash_table_lookup (priv->ids, id) != NULL;
 
   if (currently_in_view)
-    notify_change (book_view, vcard);
+    notify_change (book_view, id, vcard);
   else
     notify_add (book_view, id, vcard);
 
@@ -660,7 +665,7 @@
   g_mutex_lock (priv->pending_mutex);
 
   if (g_hash_table_lookup (priv->ids, id))
-    notify_remove (book_view, g_strdup (id));
+    notify_remove (book_view, id);
   
   g_mutex_unlock (priv->pending_mutex);
 }
Index: evolution-data-server/addressbook/libebook-dbus/e-contact.c
===================================================================
--- evolution-data-server.orig/addressbook/libebook-dbus/e-contact.c	2008-07-29 22:36:30.000000000 +0200
+++ evolution-data-server/addressbook/libebook-dbus/e-contact.c	2008-07-29 23:00:18.000000000 +0200
@@ -390,26 +390,6 @@
 	return contact_type;
 }
 
-static EVCardAttribute*
-e_contact_get_first_attr (EContact *contact, const char *attr_name)
-{
-	GList *attrs, *l;
-
-	attrs = e_vcard_get_attributes (E_VCARD (contact));
-
-	for (l = attrs; l; l = l->next) {
-		EVCardAttribute *attr = l->data;
-		const char *name;
-
-		name = e_vcard_attribute_get_name (attr);
-
-		if (!g_ascii_strcasecmp (name, attr_name))
-			return attr;
-	}
-
-	return NULL;
-}
-
 
 
 static void*
@@ -539,7 +519,7 @@
 
 	e_vcard_attribute_add_value (attr, name_str);
 
-	attr = e_contact_get_first_attr (contact, EVC_N);
+	attr = e_vcard_get_attribute (E_VCARD (contact), EVC_N);
 	if (!attr) {
 		EContactName *name = e_contact_name_from_string ((char*)data);
 
@@ -572,7 +552,7 @@
 		name->suffixes   = g_strdup (p && p->data ? p->data : "");
 	}
 
-	new_attr = e_contact_get_first_attr (contact, EVC_FN);
+	new_attr = e_vcard_get_attribute (E_VCARD (contact), EVC_FN);
 	if (!new_attr) {
 		new_attr = e_vcard_attribute_new (NULL, EVC_FN);
 		e_vcard_add_attribute (E_VCARD (contact), new_attr);
@@ -596,7 +576,7 @@
 	e_vcard_attribute_add_value (attr, name->suffixes ?: "");
 
 	/* now find the attribute for FileAs.  if it's not present, fill it in */
-	attr = e_contact_get_first_attr (contact, EVC_X_FILE_AS);
+	attr = e_vcard_get_attribute (E_VCARD (contact), EVC_X_FILE_AS);
 	if (!attr) {
 		char *strings[3], **stringptr;
 		char *string;
@@ -917,7 +897,7 @@
 			}
 		}
 		else if (info->t & E_CONTACT_FIELD_TYPE_LIST_ELEM) {
-			EVCardAttribute *attr = e_contact_get_first_attr (contact, info->vcard_field_name);
+			EVCardAttribute *attr = e_vcard_get_attribute (E_VCARD (contact), info->vcard_field_name);
 			GList *values;
 			GList *p;
 			const char *sval = g_value_get_string (value);
@@ -952,7 +932,7 @@
 		else {
 			switch (info->field_id) {
 			case E_CONTACT_CATEGORIES: {
-				EVCardAttribute *attr = e_contact_get_first_attr (contact, EVC_CATEGORIES);
+				EVCardAttribute *attr = e_vcard_get_attribute (E_VCARD (contact), EVC_CATEGORIES);
 				char **split, **s;
 				const char *str;
 
@@ -989,7 +969,7 @@
 		}
 	}
 	else if (info->t & E_CONTACT_FIELD_TYPE_STRUCT || info->t & E_CONTACT_FIELD_TYPE_GETSET) {
-		EVCardAttribute *attr = e_contact_get_first_attr (contact, info->vcard_field_name);
+		EVCardAttribute *attr = e_vcard_get_attribute (E_VCARD (contact), info->vcard_field_name);
 		void *data = info->t & E_CONTACT_FIELD_TYPE_STRUCT ? g_value_get_boxed (value) : (char*)g_value_get_string (value);
 
 		if (attr) {
@@ -1023,7 +1003,7 @@
 		EVCardAttribute *attr;
 
 		/* first we search for an attribute we can overwrite */
-		attr = e_contact_get_first_attr (contact, info->vcard_field_name);
+		attr = e_vcard_get_attribute (E_VCARD (contact), info->vcard_field_name);
 		if (attr) {
 			d(printf ("setting %s to `%s'\n", info->vcard_field_name, g_value_get_string (value)));
 			e_vcard_attribute_remove_values (attr);
@@ -1041,7 +1021,7 @@
 		const char *sval = g_value_get_string (value);
 
 		/* first we search for an attribute we can overwrite */
-		attr = e_contact_get_first_attr (contact, info->vcard_field_name);
+		attr = e_vcard_get_attribute (E_VCARD (contact), info->vcard_field_name);
 		if (attr) {
 			d(printf ("setting %s to `%s'\n", info->vcard_field_name, sval));
 			e_vcard_attribute_remove_values (attr);
@@ -1068,7 +1048,7 @@
 
 		values = g_value_get_pointer (value);
 
-		attr = e_contact_get_first_attr (contact, info->vcard_field_name);
+		attr = e_vcard_get_attribute (E_VCARD (contact), info->vcard_field_name);
 
 		if (attr) {
 			e_vcard_attribute_remove_values (attr);
@@ -1225,7 +1205,7 @@
  * Return value: A new #EContact.
  **/
 EContact*
-e_contact_new_from_vcard  (const char *vcard)
+e_contact_new_from_vcard (const char *vcard)
 {
 	EContact *contact;
 	const gchar *file_as;
@@ -1401,7 +1381,7 @@
 	info = &field_info[field_id];
 
 	if (info->t & E_CONTACT_FIELD_TYPE_BOOLEAN) {
-		EVCardAttribute *attr = e_contact_get_first_attr (contact, info->vcard_field_name);
+		EVCardAttribute *attr = e_vcard_get_attribute (E_VCARD (contact), info->vcard_field_name);
 		gboolean rv = FALSE;
 
 		if (attr) {
@@ -1411,7 +1391,7 @@
 		}
 	}
 	else if (info->t & E_CONTACT_FIELD_TYPE_LIST) {
-		EVCardAttribute *attr = e_contact_get_first_attr (contact, info->vcard_field_name);
+		EVCardAttribute *attr = e_vcard_get_attribute (E_VCARD (contact), info->vcard_field_name);
 
 		if (attr) {
 			GList *list = g_list_copy (e_vcard_attribute_get_values (attr));
@@ -1423,7 +1403,7 @@
 	}
 	else if (info->t & E_CONTACT_FIELD_TYPE_LIST_ELEM) {
 		if (info->t & E_CONTACT_FIELD_TYPE_STRING) {
-			EVCardAttribute *attr = e_contact_get_first_attr (contact, info->vcard_field_name);
+			EVCardAttribute *attr = e_vcard_get_attribute (E_VCARD (contact), info->vcard_field_name);
 
 			if (attr) {
 				GList *v;
@@ -1476,12 +1456,12 @@
 
 	}
 	else if (info->t & E_CONTACT_FIELD_TYPE_STRUCT) {
-		EVCardAttribute *attr = e_contact_get_first_attr (contact, info->vcard_field_name);
+		EVCardAttribute *attr = e_vcard_get_attribute (E_VCARD (contact), info->vcard_field_name);
 		if (attr)
 			return info->struct_getter (contact, attr);
 	}
 	else if (info->t & E_CONTACT_FIELD_TYPE_GETSET) {
-		EVCardAttribute *attr = e_contact_get_first_attr (contact, info->vcard_field_name);
+		EVCardAttribute *attr = e_vcard_get_attribute (E_VCARD (contact), info->vcard_field_name);
 		void *rv = NULL;
 
 		if (attr)
@@ -1514,7 +1494,7 @@
 			return g_strdup (str);
 		}
 		case E_CONTACT_CATEGORIES: {
-			EVCardAttribute *attr = e_contact_get_first_attr (contact, EVC_CATEGORIES);
+			EVCardAttribute *attr = e_vcard_get_attribute (E_VCARD (contact), EVC_CATEGORIES);
 			char *rv = NULL;
 
 			if (attr) {
@@ -1537,6 +1517,23 @@
 			break;
 		}
 	}
+        else if (info->t & E_CONTACT_FIELD_TYPE_STRING) {
+                EVCardAttribute *attr;
+                const char *cv = NULL;
+                GList *v = NULL;
+
+                cv = contact->priv->cached_strings[field_id];
+
+                if (cv)
+                        return g_strdup (cv);
+
+                attr = e_vcard_get_attribute (E_VCARD (contact), info->vcard_field_name);
+
+                if (attr)
+                        v = e_vcard_attribute_get_values (attr);
+
+                return (v ? g_strdup (v->data) : NULL);
+        }
 	else {
 		GList *attrs, *l;
 		GList *rv = NULL; /* used for multi attribute lists */
@@ -1550,18 +1547,12 @@
 			name = e_vcard_attribute_get_name (attr);
 
 			if (!g_ascii_strcasecmp (name, info->vcard_field_name)) {
-				GList *v;
-				v = e_vcard_attribute_get_values (attr);
-
-				if (info->t & E_CONTACT_FIELD_TYPE_STRING) {
-					return v ? g_strdup (v->data) : NULL;
-				}
-				else {
-					rv = g_list_append (rv, v ? g_strdup (v->data) : NULL);
-				}
+				GList *v = e_vcard_attribute_get_values (attr);
+				rv = g_list_prepend (rv, v ? g_strdup (v->data) : NULL);
 			}
 		}
-		return rv;
+
+		return g_list_reverse (rv);
 	}
 	return NULL;
 }
Index: evolution-data-server/addressbook/libebook-dbus/e-vcard.h
===================================================================
--- evolution-data-server.orig/addressbook/libebook-dbus/e-vcard.h	2008-07-29 22:36:29.000000000 +0200
+++ evolution-data-server/addressbook/libebook-dbus/e-vcard.h	2008-07-29 23:00:18.000000000 +0200
@@ -129,13 +129,16 @@
 GType   e_vcard_get_type                     (void);
 
 void    e_vcard_construct                    (EVCard *evc, const char *str);
+void    e_vcard_construct_with_uid           (EVCard *evc, const char *str, const char *uid);
+
 EVCard* e_vcard_new                          (void);
 EVCard* e_vcard_new_from_string              (const char *str);
 
 char*   e_vcard_to_string                    (EVCard *evc, EVCardFormat format);
 
 /* mostly for debugging */
-void    e_vcard_dump_structure               (EVCard *evc);
+void     e_vcard_dump_structure              (EVCard *evc);
+gboolean e_vcard_is_parsed                   (EVCard *evc);
 
 
 /* attributes */
Index: evolution-data-server/addressbook/libebook-dbus/e-vcard.c
===================================================================
--- evolution-data-server.orig/addressbook/libebook-dbus/e-vcard.c	2008-07-29 22:36:30.000000000 +0200
+++ evolution-data-server/addressbook/libebook-dbus/e-vcard.c	2008-07-29 23:00:18.000000000 +0200
@@ -47,6 +47,7 @@
 
 struct _EVCardPrivate {
 	GList *attributes;
+	char  *vcard;
 };
 
 struct _EVCardAttribute {
@@ -80,9 +81,11 @@
 	EVCard *evc = E_VCARD (object);
 
 	if (evc->priv) {
-
+		/* Directly access priv->attributes and don't call e_vcard_ensure_attributes(),
+ 		 * since it is pointless to start vCard parsing that late. */
 		g_list_foreach (evc->priv->attributes, (GFunc)e_vcard_attribute_free, NULL);
 		g_list_free (evc->priv->attributes);
+		g_free (evc->priv->vcard);
 
 		g_free (evc->priv);
 		evc->priv = NULL;
@@ -583,6 +586,22 @@
 	evc->priv->attributes = g_list_reverse (evc->priv->attributes);
 }
 
+static GList*
+e_vcard_ensure_attributes (EVCard *evc)
+{
+	if (evc->priv->vcard) {
+		char *vcs = evc->priv->vcard;
+
+		/* detach vCard to avoid loops */
+		evc->priv->vcard = NULL;
+
+		parse (evc, vcs);
+		g_free (vcs);
+	}
+
+	return evc->priv->attributes;
+}
+
 /**
  * e_vcard_escape_string:
  * @s: the string to escape
@@ -673,13 +692,31 @@
 }
 
 void
-e_vcard_construct (EVCard *evc, const char *str)
+e_vcard_construct_with_uid (EVCard *evc, const char *str, const char *uid)
 {
 	g_return_if_fail (E_IS_VCARD (evc));
 	g_return_if_fail (str != NULL);
 
+	g_return_if_fail (NULL == evc->priv->vcard);
+	g_return_if_fail (NULL == evc->priv->attributes);
+
 	if (*str)
-		parse (evc, str);
+		evc->priv->vcard = g_strdup (str);
+
+        if (uid) {
+                EVCardAttribute *attr;
+
+                attr = e_vcard_attribute_new (NULL, EVC_UID);
+                e_vcard_attribute_add_value (attr, uid);
+
+                evc->priv->attributes = g_list_prepend (evc->priv->attributes, attr);
+        }
+}
+
+void
+e_vcard_construct (EVCard *evc, const char *str)
+{
+        e_vcard_construct_with_uid (evc, str, NULL);
 }
 
 /**
@@ -740,7 +777,7 @@
 	   vcard might contain */
 	g_string_append (str, "VERSION:3.0" CRLF);
 
-	for (l = evc->priv->attributes; l; l = l->next) {
+	for (l = e_vcard_ensure_attributes (evc); l; l = l->next) {
 		GList *p;
 		EVCardAttribute *attr = l->data;
 		GString *attr_str;
@@ -890,7 +927,7 @@
 	g_return_if_fail (E_IS_VCARD (evc));
 
 	printf ("vCard\n");
-	for (a = evc->priv->attributes; a; a = a->next) {
+	for (a = e_vcard_ensure_attributes (evc); a; a = a->next) {
 		GList *p;
 		EVCardAttribute *attr = a->data;
 		printf ("+-- %s\n", attr->name);
@@ -920,6 +957,19 @@
 }
 
 /**
+ * e_vcard_dump_structure:
+ * @evc: the #EVCard to dump
+ *
+ * Check if the @evc has been parsed already. Used for debugging.
+ **/
+gboolean
+e_vcard_is_parsed (EVCard *evc)
+{
+	g_return_if_fail (E_IS_VCARD (evc));
+        return (!evc->priv->vcard && evc->priv->attributes);
+}
+
+/**
  * e_vcard_attribute_new:
  * @attr_group: a group name
  * @attr_name: an attribute name
@@ -1009,7 +1059,7 @@
 	g_return_if_fail (E_IS_VCARD (evc));
 	g_return_if_fail (attr_name != NULL);
 
-	attr = evc->priv->attributes;
+	attr = e_vcard_ensure_attributes (evc);
 	while (attr) {
 		GList *next_attr;
 		EVCardAttribute *a = attr->data;
@@ -1043,6 +1093,9 @@
 	g_return_if_fail (E_IS_VCARD (evc));
 	g_return_if_fail (attr != NULL);
 
+	/* No need to call e_vcard_ensure_attributes() here: That function has been
+ 	 * called already if this is a valid call and attr is one our attributes.
+	 */
 	evc->priv->attributes = g_list_remove (evc->priv->attributes, attr);
 	e_vcard_attribute_free (attr);
 }
@@ -1060,7 +1113,7 @@
 	g_return_if_fail (E_IS_VCARD (evc));
 	g_return_if_fail (attr != NULL);
 
-	evc->priv->attributes = g_list_prepend (evc->priv->attributes, attr);
+	evc->priv->attributes = g_list_prepend (e_vcard_ensure_attributes (evc), attr);
 }
 
 /**
@@ -1569,7 +1622,7 @@
 {
 	g_return_val_if_fail (E_IS_VCARD (evcard), NULL);
 
-	return evcard->priv->attributes;
+	return e_vcard_ensure_attributes (evcard);
 }
 
 /**
@@ -1587,17 +1640,22 @@
 e_vcard_get_attribute (EVCard     *vcard,
 		       const char *name)
 {
+        EVCardAttribute *attr;
         GList *attrs, *l;
 
         g_return_val_if_fail (E_IS_VCARD (vcard), NULL);
         g_return_val_if_fail (name != NULL, NULL);
 
-        attrs = vcard->priv->attributes;
+        if (vcard->priv->vcard && !strcmp (name, EVC_UID)) {
+                for (l = vcard->priv->attributes; l; l = l->next) {
+                        if (strcmp ((attr = l->data)->name, name) == 0)
+                                return attr;
+                }
+        }
+
+        attrs = e_vcard_ensure_attributes (vcard);
         for (l = attrs; l; l = l->next) {
-                EVCardAttribute *attr;
-		
-                attr = (EVCardAttribute *) l->data;
-                if (strcmp (attr->name, name) == 0)
+                if (strcmp ((attr = l->data)->name, name) == 0)
                         return attr;
         }
 
