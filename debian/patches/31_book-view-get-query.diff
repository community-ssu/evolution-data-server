Index: evolution-data-server/addressbook/libebook-dbus/e-book-view-private.h
===================================================================
--- evolution-data-server.orig/addressbook/libebook-dbus/e-book-view-private.h	2008-08-11 15:49:36.000000000 +0200
+++ evolution-data-server/addressbook/libebook-dbus/e-book-view-private.h	2008-08-11 15:49:51.000000000 +0200
@@ -24,7 +24,7 @@
 #include "e-book.h"
 #include "e-book-view.h"
 
-EBookView *e_book_view_new (EBook *book, DBusGProxy *view_proxy);
+EBookView *e_book_view_new (EBook *book, EBookQuery *query, DBusGProxy *view_proxy);
 
 G_END_DECLS
 
Index: evolution-data-server/addressbook/libebook-dbus/e-book-view.c
===================================================================
--- evolution-data-server.orig/addressbook/libebook-dbus/e-book-view.c	2008-08-11 15:43:04.000000000 +0200
+++ evolution-data-server/addressbook/libebook-dbus/e-book-view.c	2008-08-11 16:31:03.000000000 +0200
@@ -33,6 +33,7 @@
 
 struct _EBookViewPrivate {
   EBook *book;
+  EBookQuery *query;
   DBusGProxy *view_proxy;
 
   gboolean running : 1;
@@ -61,6 +62,11 @@
     view->priv->view_proxy = NULL;
   }
 
+  if (view->priv->query) {
+    e_book_query_unref (view->priv->query);
+    view->priv->query = NULL;
+  }
+
   if (view->priv->book) {
     g_object_unref (view->priv->book);
     view->priv->book = NULL;
@@ -222,7 +228,7 @@
  * Return value: A new #EBookView.
  **/
 EBookView*
-e_book_view_new (EBook *book, DBusGProxy *view_proxy)
+e_book_view_new (EBook *book, EBookQuery *query, DBusGProxy *view_proxy)
 {
   EBookView *view;
   EBookViewPrivate *priv;
@@ -231,6 +237,7 @@
   priv = view->priv;
 
   priv->book = g_object_ref (book);
+  priv->query = e_book_query_ref (query);
 
   /* Take ownership of the view_proxy object */
   priv->view_proxy = view_proxy;
@@ -258,6 +265,14 @@
   return book_view->priv->book;
 }
 
+EBookQuery *
+e_book_view_get_query (EBookView *book_view)
+{
+  g_return_val_if_fail (E_IS_BOOK_VIEW (book_view), NULL);
+
+  return book_view->priv->query;
+}
+
 /**
  * e_book_view_start:
  * @book_view: an #EBookView
Index: evolution-data-server/addressbook/libebook-dbus/e-book-view.h
===================================================================
--- evolution-data-server.orig/addressbook/libebook-dbus/e-book-view.h	2008-08-11 15:43:04.000000000 +0200
+++ evolution-data-server/addressbook/libebook-dbus/e-book-view.h	2008-08-11 16:31:31.000000000 +0200
@@ -73,6 +73,7 @@
 void               e_book_view_thaw                   (EBookView *book_view);
 
 struct _EBook     *e_book_view_get_book               (EBookView *book_view);
+struct EBookQuery *e_book_view_get_query              (EBookView *book_view);
 
 void               e_book_view_set_freezable          (EBookView *book_view, gboolean freezable);
 gboolean           e_book_view_is_freezable           (EBookView *book_view);
Index: evolution-data-server/addressbook/libebook-dbus/e-book.c
===================================================================
--- evolution-data-server.orig/addressbook/libebook-dbus/e-book.c	2008-08-11 15:45:38.000000000 +0200
+++ evolution-data-server/addressbook/libebook-dbus/e-book.c	2008-08-11 15:49:10.000000000 +0200
@@ -72,6 +72,7 @@
 
 typedef struct {
   EBook *book;
+  EBookQuery *query;
   void *callback; /* TODO union */
   gpointer closure;
   gpointer data;
@@ -1738,7 +1739,7 @@
   dbus_g_connection_unref (view_conn);
 
   if (view_proxy) {
-    *book_view = e_book_view_new (book, view_proxy);
+    *book_view = e_book_view_new (book, query, view_proxy);
   } else {
     *book_view = NULL;
     g_set_error (error, E_BOOK_ERROR, E_BOOK_ERROR_CORBA_EXCEPTION,
@@ -1777,7 +1778,7 @@
       dbus_g_connection_unref (view_conn);
 
       if (view_proxy) {
-        view = e_book_view_new (data->book, view_proxy);
+        view = e_book_view_new (data->book, data->query, view_proxy);
         status = E_BOOK_ERROR_OK;
       } else {
         g_warning (G_STRLOC ": cannot get connection to view: %s", err->message);
@@ -1793,6 +1794,9 @@
   if (cb)
     cb (data->book, status, view, data->closure);
 
+  e_book_query_unref (data->query);
+  g_object_unref (data->book);
+
   g_slice_free (AsyncData, data);
 }
 
@@ -1821,7 +1825,8 @@
   e_return_async_error_val_if_fail (query, E_BOOK_ERROR_INVALID_ARG);
 
   data = g_slice_new0 (AsyncData);
-  data->book = book;
+  data->book = g_object_ref (book);
+  data->query = e_book_query_ref (query);
   data->callback = cb;
   data->closure = closure;
 
