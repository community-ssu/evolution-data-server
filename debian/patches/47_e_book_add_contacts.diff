Index: evolution-data-server/addressbook/backends/file/e-book-backend-file.c
===================================================================
--- evolution-data-server.orig/addressbook/backends/file/e-book-backend-file.c	2008-11-18 16:18:28.000000000 +0100
+++ evolution-data-server/addressbook/backends/file/e-book-backend-file.c	2008-11-19 09:28:09.000000000 +0100
@@ -163,60 +163,82 @@
 	if (tm)
 		strftime (time_string, 100, "%Y-%m-%dT%H:%M:%SZ", tm);
 	e_contact_set (contact, E_CONTACT_REV, time_string);
-	
 }
 
-static EBookBackendSyncStatus
-do_create(EBookBackendFile  *bf,
-	  const char      *vcard_req,
-	  EContact **contact)
-{
-	DB             *db = bf->priv->file_db;
-	DBT            id_dbt, vcard_dbt;
-	int            db_error;
-	char           *id;
-	char           *vcard;
-	const char *rev;
-	
-	g_assert (bf);
-	g_assert (vcard_req);
-	g_assert (contact);
-
-	id = e_book_backend_file_create_unique_id ();
-
-	string_to_dbt (id, &id_dbt);
+/* put the vcard to db, but doesn't sync the db */
+static int
+insert_contact (EBookBackendFile *bf,
+                const char       *vcard_req,
+                EContact        **contact)
+{
+        DB *db = bf->priv->file_db;
+        DBT id_dbt, vcard_dbt;
+        char *id;
+        char *vcard;
+        const char *rev;
+        int db_error;
+
+        g_assert (bf);
+        g_assert (vcard_req);
+        g_assert (contact);
+
+        id = e_book_backend_file_create_unique_id ();
+
+        string_to_dbt (id, &id_dbt);
+
+        *contact = e_contact_new_from_vcard (vcard_req);
+        e_contact_set (*contact, E_CONTACT_UID, id);
+        rev = e_contact_get_const (*contact,  E_CONTACT_REV);
+        if (!(rev && *rev))
+                set_revision (*contact);
+
+        vcard = e_vcard_to_string (E_VCARD (*contact), EVC_FORMAT_VCARD_30);
+
+        string_to_dbt (vcard, &vcard_dbt);
+
+        global_env.had_error = FALSE;
+        db_error = db->put (db, NULL, &id_dbt, &vcard_dbt, 0);
+        if (global_env.had_error)
+                db_error = ENOSPC;
 
-	*contact = e_contact_new_from_vcard (vcard_req);
-	e_contact_set (*contact, E_CONTACT_UID, id);
-	rev = e_contact_get_const (*contact,  E_CONTACT_REV);
-	if (!(rev && *rev))
-		set_revision (*contact);
+	g_free (vcard);
+        g_free (id);
 
-	vcard = e_vcard_to_string (E_VCARD (*contact), EVC_FORMAT_VCARD_30);
+	if (db_error) {
+		g_warning (G_STRLOC ": db->put failed with %s", db_strerror (db_error));
+		g_object_unref (*contact);
+		*contact = NULL;
+	}
 
-	string_to_dbt (vcard, &vcard_dbt);
+        return db_error;
+}
 
-	global_env.had_error = FALSE;
-	db_error = db->put (db, NULL, &id_dbt, &vcard_dbt, 0);
-	if (global_env.had_error) db_error = ENOSPC;
+/* put the vcard to db and sync the db directly */
+static EBookBackendSyncStatus
+do_create (EBookBackendFile *bf,
+           const char       *vcard_req,
+           EContact        **contact)
+{
+        DB *db = bf->priv->file_db;
+        int db_error;
+
+        g_assert (bf);
+        g_assert (vcard_req);
+        g_assert (contact);
 
-	g_free (vcard);
+        db_error = insert_contact (bf, vcard_req, contact);
 
 	if (0 == db_error) {
 		global_env.had_error = FALSE;
 		db_error = db->sync (db, 0);
-		if (global_env.had_error) db_error = ENOSPC;
+		if (global_env.had_error)
+                        db_error = ENOSPC;
 		if (db_error != 0) {
 			g_warning ("db->sync failed with %s", db_strerror (db_error));
 		}
-	} else {
-		g_warning (G_STRLOC ": db->put failed with %s", db_strerror (db_error));
-		g_object_unref (*contact);
-		*contact = NULL;
-	}
+        }
 
-	g_free (id);
-	return db_error_to_status (db_error);
+        return db_error_to_status (db_error);
 }
 
 static EBookBackendSyncStatus
@@ -237,6 +259,53 @@
 }
 
 static EBookBackendSyncStatus
+e_book_backend_file_create_contacts (EBookBackendSync *backend,
+				     EDataBook *book,
+				     guint32 opid,
+				     const char **vcards,
+				     GList **contacts)
+{
+        EBookBackendFile *bf;
+        EContact *contact;
+        DB *db;
+        int db_error;
+
+        bf = E_BOOK_BACKEND_FILE (backend);
+        db = bf->priv->file_db;
+
+        /* Commit each of the new contacts, aborting if there was an error.
+           Really this should be in a transaction... */
+        for (; *vcards; vcards++) {
+                contact = NULL;
+
+		/* Commit the contact */
+                db_error = insert_contact (bf, *vcards, &contact);
+
+                if (db_error != 0) {
+                        /* TODO: proper error handling */
+                        /* revert transaction and clean the contacts list */
+                        /* return db_error_to_status (db_error); */
+
+                        /* try to sync the already added contacts now */
+                        break;
+                }
+
+                e_book_backend_file_index_add_contact (bf->priv->index, contact);
+
+                /* Pass the contact back to the server for view updates */
+                *contacts = g_list_prepend (*contacts, contact);
+        }
+
+        /* Sync the database */
+        global_env.had_error = FALSE;
+        db_error = db->sync (db, 0);
+        if (global_env.had_error)
+                db_error = ENOSPC;
+
+        return db_error_to_status (db_error);
+}
+
+static EBookBackendSyncStatus
 e_book_backend_file_remove_contacts (EBookBackendSync *backend,
 				     EDataBook *book,
 				     guint32 opid,
@@ -1735,9 +1804,10 @@
 	backend_class->set_view_sort_order     = e_book_backend_file_set_book_view_sort_order;
 	sync_class->remove_sync                = e_book_backend_file_remove;
 	sync_class->create_contact_sync        = e_book_backend_file_create_contact;
+        sync_class->create_contacts_sync       = e_book_backend_file_create_contacts;
 	sync_class->remove_contacts_sync       = e_book_backend_file_remove_contacts;
 	sync_class->modify_contact_sync        = e_book_backend_file_modify_contact;
-	sync_class->modify_contacts_sync        = e_book_backend_file_modify_contacts;
+	sync_class->modify_contacts_sync       = e_book_backend_file_modify_contacts;
 	sync_class->get_contact_sync           = e_book_backend_file_get_contact;
 	sync_class->get_contact_list_sync      = e_book_backend_file_get_contact_list;
 	sync_class->get_changes_sync           = e_book_backend_file_get_changes;
Index: evolution-data-server/addressbook/libebook-dbus/e-book.c
===================================================================
--- evolution-data-server.orig/addressbook/libebook-dbus/e-book.c	2008-11-18 16:18:28.000000000 +0100
+++ evolution-data-server/addressbook/libebook-dbus/e-book.c	2008-11-18 16:18:28.000000000 +0100
@@ -1342,7 +1342,7 @@
  *
  * Return value: %TRUE if the operation was started, %FALSE otherwise.
  **/
-gboolean
+guint
 e_book_async_add_contact (EBook *book, EContact *contact, EBookIdCallback cb, gpointer closure)
 {
   char *vcard;
@@ -1365,6 +1365,100 @@
 }
 
 /**
+ * e_book_add_contacts:
+ * @book: an #EBook
+ * @contacts: an #GList of #EContacts
+ * @error: a #GError to set on failure
+ *
+ * Adds @contacts to @book. This is always more efficient than calling
+ * e_book_add_contact if you have more than one @contacts to add, as some
+ * backends can implement it as a batch request.
+ *
+ * Return value: %TRUE if successful, %FALSE otherwise
+ **/
+gboolean
+e_book_add_contacts (EBook *book, GList *contacts, GError **error)
+{
+  GError *err = NULL;
+  GList *it;
+  char **vcards, **uids, **i;
+
+  e_return_error_if_fail (E_IS_BOOK (book), E_BOOK_ERROR_INVALID_ARG);
+  e_return_error_if_fail (book->priv->proxy, E_BOOK_ERROR_REPOSITORY_OFFLINE);
+  e_return_error_if_fail (contacts != NULL, E_BOOK_ERROR_INVALID_ARG);
+
+  vcards = g_new0 (char*, g_list_length (contacts)+1);
+  for (i = vcards, it = contacts; it; it = it->next, i++) {
+    *i = e_vcard_to_string (E_VCARD (it->data), EVC_FORMAT_VCARD_30);
+  }
+
+  org_gnome_evolution_dataserver_addressbook_Book_add_contacts (book->priv->proxy, (const char **)vcards, &uids, &err);
+  for (i = uids, it = contacts; *i && it; i++, it = it->next) {
+    e_contact_set (it->data, E_CONTACT_UID, *i);
+  }
+  if (vcards)
+    g_strfreev (vcards);
+  if (uids)
+    g_strfreev (uids);
+
+  return unwrap_gerror (err, error);
+}
+
+static void
+add_contacts_reply (DBusGProxy *proxy, char **uids, GError *error, gpointer user_data)
+{
+  AsyncData *data = user_data;
+  EBookCallback cb = data->callback;
+
+  /* TODO: what to do with uids? */
+  if (cb)
+    cb (data->book, get_status_from_error (error), data->closure);
+
+  g_strfreev (uids);
+  g_slice_free (AsyncData, data);
+}
+
+/**
+ * e_book_async_add_contacts:
+ * @book: an #EBook
+ * @contacts: a #GList of #EContacts
+ * @cb: function to call when the operation finishes
+ * @closure: data to pass to callback function
+ *
+ * Adds @contacts to @book without blocking. This is always more
+ * efficient than calling e_book_add_contact if you have more than
+ * one @contacts to add, as some backends can implement it as a
+ * batch request.
+ *
+ * Return value: %TRUE if the operation was started, %FALSE otherwise.
+ **/
+guint
+e_book_async_add_contacts (EBook *book, GList *contacts, EBookCallback cb, gpointer closure)
+{
+  char **vcards, **i;
+  AsyncData *data;
+
+  e_return_async_error_if_fail (E_IS_BOOK (book), E_BOOK_ERROR_INVALID_ARG);
+  e_return_async_error_if_fail (book->priv->proxy, E_BOOK_ERROR_REPOSITORY_OFFLINE);
+  e_return_async_error_if_fail (contacts != NULL, E_BOOK_ERROR_INVALID_ARG);
+
+  vcards = g_new0 (char*, g_list_length (contacts)+1);
+  for (i = vcards; contacts; contacts = contacts->next, i++) {
+    *i = e_vcard_to_string (E_VCARD (contacts->data), EVC_FORMAT_VCARD_30);
+  }
+
+  data = g_slice_new0 (AsyncData);
+  data->book = book;
+  data->callback = cb;
+  data->closure = closure;
+
+  org_gnome_evolution_dataserver_addressbook_Book_add_contacts_async (book->priv->proxy, (const char**)vcards, add_contacts_reply, data);
+
+  g_strfreev (vcards);
+  return 0;
+}
+
+/**
  * e_book_commit_contact:
  * @book: an #EBook
  * @contact: an #EContact
Index: evolution-data-server/addressbook/libebook-dbus/e-book.h
===================================================================
--- evolution-data-server.orig/addressbook/libebook-dbus/e-book.h	2008-11-18 16:18:01.000000000 +0100
+++ evolution-data-server/addressbook/libebook-dbus/e-book.h	2008-11-18 16:18:28.000000000 +0100
@@ -171,11 +171,20 @@
 					    EContact        *contact,
 					    GError         **error);
 
-gboolean e_book_async_add_contact          (EBook           *book,
+guint    e_book_async_add_contact          (EBook           *book,
 					    EContact        *contact,
 					    EBookIdCallback  cb,
 					    gpointer         closure);
 
+gboolean e_book_add_contacts               (EBook           *book,
+                                            GList           *contacts,
+                                            GError         **error);
+
+guint    e_book_async_add_contacts         (EBook           *book,
+                                            GList           *contacts,
+                                            EBookCallback    cb,
+                                            gpointer         closure);
+
 /* Modifying contacts. */
 gboolean e_book_commit_contact             (EBook       *book,
 					    EContact    *contact,
Index: evolution-data-server/addressbook/libedata-book-dbus/e-book-backend-sync.c
===================================================================
--- evolution-data-server.orig/addressbook/libedata-book-dbus/e-book-backend-sync.c	2008-11-18 16:18:02.000000000 +0100
+++ evolution-data-server/addressbook/libedata-book-dbus/e-book-backend-sync.c	2008-11-18 16:18:28.000000000 +0100
@@ -62,6 +62,35 @@
 }
 
 /**
+ * e_book_backend_sync_create_contacts:
+ * @backend: an #EBookBackendSync
+ * @book: an #EDataBook
+ * @opid: the unique ID of the operation
+ * @vcard: the string representation of a contact
+ * @contact: a pointer to a location to store the resulting #EContact
+ *
+ * Creates new contacts with the contents of @vcards in @backend
+ *
+ * Return value: An #EBookBackendSyncStatus indicating the outcome of the operation.
+ **/
+EBookBackendSyncStatus
+e_book_backend_sync_create_contacts (EBookBackendSync *backend,
+				     EDataBook *book,
+				     guint32 opid,
+				     const char **vcards,
+				     GList **contacts)
+{
+	g_return_val_if_fail (E_IS_BOOK_BACKEND_SYNC (backend), GNOME_Evolution_Addressbook_OtherError);
+	g_return_val_if_fail (E_IS_DATA_BOOK (book), GNOME_Evolution_Addressbook_OtherError);
+	g_return_val_if_fail (vcards, GNOME_Evolution_Addressbook_OtherError);
+	g_return_val_if_fail (contacts, GNOME_Evolution_Addressbook_OtherError);
+
+	g_assert (E_BOOK_BACKEND_SYNC_GET_CLASS (backend)->create_contacts_sync);
+
+	return (* E_BOOK_BACKEND_SYNC_GET_CLASS (backend)->create_contacts_sync) (backend, book, opid, vcards, contacts);
+}
+
+/**
  * e_book_backend_sync_remove:
  * @backend: an #EBookBackendSync
  * @book: an #EDataBook
@@ -410,6 +439,24 @@
 }
 
 static void
+_e_book_backend_create_contacts (EBookBackend *backend,
+				 EDataBook    *book,
+				 guint32       opid,
+				 const char  **vcards)
+{
+	EBookBackendSyncStatus status;
+	GList *contacts = NULL;
+
+	status = e_book_backend_sync_create_contacts (E_BOOK_BACKEND_SYNC (backend), book, opid, vcards, &contacts);
+
+	e_data_book_respond_create_contacts (book, opid, status, contacts);
+
+        /* cause double free */
+	/*g_list_foreach (contacts, (GFunc)g_object_unref, NULL);*/
+	g_list_free (contacts);
+}
+
+static void
 _e_book_backend_remove_contacts (EBookBackend *backend,
 				 EDataBook    *book,
 				 guint32       opid,
@@ -612,6 +659,7 @@
 
 	backend_class->remove = _e_book_backend_remove;
 	backend_class->create_contact = _e_book_backend_create_contact;
+        backend_class->create_contacts = _e_book_backend_create_contacts;
 	backend_class->remove_contacts = _e_book_backend_remove_contacts;
 	backend_class->modify_contact = _e_book_backend_modify_contact;
 	backend_class->modify_contacts = _e_book_backend_modify_contacts;
Index: evolution-data-server/addressbook/libedata-book-dbus/e-book-backend-sync.h
===================================================================
--- evolution-data-server.orig/addressbook/libedata-book-dbus/e-book-backend-sync.h	2008-11-18 16:18:02.000000000 +0100
+++ evolution-data-server/addressbook/libedata-book-dbus/e-book-backend-sync.h	2008-11-18 16:18:28.000000000 +0100
@@ -70,6 +70,10 @@
 							 guint32 opid,
 							 const char **vcards,
 							 GList **contacts);
+	EBookBackendSyncStatus (*create_contacts_sync)  (EBookBackendSync *backend, EDataBook *book,
+							 guint32 opid,
+							 const char **vcards,
+							 GList **contacts);
 
 	/* Padding for future expansion */
 	void (*_pas_reserved1) (void);
@@ -85,6 +89,7 @@
 
 EBookBackendSyncStatus e_book_backend_sync_remove  (EBookBackendSync *backend, EDataBook *book, guint32 opid);
 EBookBackendSyncStatus e_book_backend_sync_create_contact  (EBookBackendSync *backend, EDataBook *book, guint32 opid, const char *vcard, EContact **contact);
+EBookBackendSyncStatus e_book_backend_sync_create_contacts  (EBookBackendSync *backend, EDataBook *book, guint32 opid, const char **vcard, GList **contacts);
 EBookBackendSyncStatus e_book_backend_sync_remove_contacts (EBookBackendSync *backend, EDataBook *book, guint32 opid, GList *id_list, GList **removed_ids);
 EBookBackendSyncStatus e_book_backend_sync_modify_contact  (EBookBackendSync *backend, EDataBook *book, guint32 opid, const char *vcard, EContact **contact);
 EBookBackendSyncStatus e_book_backend_sync_modify_contacts  (EBookBackendSync *backend, EDataBook *book, guint32 opid, const char **vcard, GList **contacts);
Index: evolution-data-server/addressbook/libedata-book-dbus/e-book-backend.c
===================================================================
--- evolution-data-server.orig/addressbook/libedata-book-dbus/e-book-backend.c	2008-11-18 16:18:28.000000000 +0100
+++ evolution-data-server/addressbook/libedata-book-dbus/e-book-backend.c	2008-11-18 16:18:28.000000000 +0100
@@ -183,6 +183,31 @@
 }
 
 /**
+ * e_book_backend_create_contacts:
+ * @backend: an #EBookBackend
+ * @book: an #EDataBook
+ * @opid: the ID to use for this operation
+ * @vcards: the VCards to update
+ *
+ * Executes a 'create contacts' request specified by @opid on @book
+ * using @backend.
+ **/
+void
+e_book_backend_create_contacts (EBookBackend *backend,
+				EDataBook    *book,
+				guint32       opid,
+				const char  **vcards)
+{
+	g_return_if_fail (E_IS_BOOK_BACKEND (backend));
+	g_return_if_fail (E_IS_DATA_BOOK (book));
+	g_return_if_fail (vcards);
+
+	g_assert (E_BOOK_BACKEND_GET_CLASS (backend)->create_contacts);
+
+	(* E_BOOK_BACKEND_GET_CLASS (backend)->create_contacts) (backend, book, opid, vcards);
+}
+
+/**
  * e_book_backend_remove_contacts:
  * @backend: an #EBookBackend
  * @book: an #EDataBook
Index: evolution-data-server/addressbook/libedata-book-dbus/e-book-backend.h
===================================================================
--- evolution-data-server.orig/addressbook/libedata-book-dbus/e-book-backend.h	2008-11-18 16:18:28.000000000 +0100
+++ evolution-data-server/addressbook/libedata-book-dbus/e-book-backend.h	2008-11-18 16:18:28.000000000 +0100
@@ -74,6 +74,7 @@
 
 	void (*sync) (EBookBackend *backend);
 	void (*modify_contacts)  (EBookBackend *backend, EDataBook *book, guint32 opid, const char **vcards);
+        void (*create_contacts)  (EBookBackend *backend, EDataBook *book, guint32 opid, const char **vcards);
 
 	/* Padding for future expansion */
 	void (*set_view_sort_order) (EBookBackend *backend, EDataBookView *book_view, const gchar *query_term);
@@ -112,6 +113,10 @@
 						     EDataBook                *book,
 						     guint32                   opid,
 						     const char               *vcard);
+void        e_book_backend_create_contacts          (EBookBackend             *backend,
+                                                     EDataBook                *book,
+                                                     guint32                   opid,
+                                                     const char              **vcards);
 void        e_book_backend_remove_contacts          (EBookBackend             *backend,
 						     EDataBook                *book,
 						     guint32                   opid,
Index: evolution-data-server/addressbook/libedata-book-dbus/e-data-book.c
===================================================================
--- evolution-data-server.orig/addressbook/libedata-book-dbus/e-data-book.c	2008-11-18 16:18:28.000000000 +0100
+++ evolution-data-server/addressbook/libedata-book-dbus/e-data-book.c	2008-11-18 16:18:28.000000000 +0100
@@ -40,6 +40,7 @@
 static void impl_AddressBook_Book_getContactList(EDataBook *book, const char *query, DBusGMethodInvocation *context);
 static void impl_AddressBook_Book_authenticateUser(EDataBook *book, const char *IN_user, const char *IN_passwd, const char *IN_auth_method, DBusGMethodInvocation *context);
 static void impl_AddressBook_Book_addContact(EDataBook *book, const char *IN_vcard, DBusGMethodInvocation *context);
+static void impl_AddressBook_Book_addContacts(EDataBook *book, const char **IN_vcards, DBusGMethodInvocation *context);
 static void impl_AddressBook_Book_modifyContact(EDataBook *book, const char *IN_vcard, DBusGMethodInvocation *context);
 static void impl_AddressBook_Book_modifyContacts(EDataBook *book, const char **IN_vcards, DBusGMethodInvocation *context);
 static void impl_AddressBook_Book_removeContacts(EDataBook *book, const char **IN_uids, DBusGMethodInvocation *context);
@@ -70,6 +71,7 @@
   OP_OPEN,
   OP_AUTHENTICATE,
   OP_ADD_CONTACT,
+  OP_ADD_CONTACTS,
   OP_GET_CONTACT,
   OP_GET_CONTACTS,
   OP_MODIFY_CONTACT,
@@ -133,6 +135,10 @@
     e_book_backend_create_contact (backend, op->book, op->id, op->vcard);
     g_free (op->vcard);
     break;
+  case OP_ADD_CONTACTS:
+    e_book_backend_create_contacts (backend, op->book, op->id, (const char**)op->vcards);
+    g_strfreev (op->vcards);
+    break;
   case OP_GET_CONTACT:
     e_book_backend_get_contact (backend, op->book, op->id, op->uid);
     g_free (op->uid);
@@ -430,6 +436,49 @@
 }
 
 static void
+impl_AddressBook_Book_addContacts(EDataBook *book, const char **IN_vcards, DBusGMethodInvocation *context)
+{
+  OperationData *op;
+
+  if (IN_vcards == NULL || IN_vcards[0] == NULL) {
+    dbus_g_method_return_error (context, g_error_new (E_DATA_BOOK_ERROR, InvalidQuery, _("Cannot add contacts")));
+    return;
+  }
+
+  op = op_new (OP_ADD_CONTACTS, book, context);
+  op->vcards = g_strdupv ((char**)IN_vcards);
+  g_thread_pool_push (op_pool, op, NULL);
+}
+
+void
+e_data_book_respond_create_contacts (EDataBook *book, guint32 opid, EDataBookStatus status, GList *contacts)
+{
+  DBusGMethodInvocation *context = opid_fetch (opid);
+
+  if (status != Success) {
+    dbus_g_method_return_error (context, g_error_new (E_DATA_BOOK_ERROR, status, _("Cannot add contacts")));
+  } else {
+    char **uids;
+    int i = 0;
+
+    uids = g_new0 (char *, g_list_length (contacts)+1);
+    for (; contacts; contacts = contacts->next) {
+      if (!E_IS_CONTACT (contacts->data)) {
+        g_warning ("%s: not a contact", G_STRFUNC);
+        continue;
+      }
+      uids[i++] = (char *) e_contact_get_const (contacts->data, E_CONTACT_UID);
+
+      e_book_backend_notify_update (e_data_book_get_backend (book), contacts->data);
+    }
+    e_book_backend_notify_complete (e_data_book_get_backend (book));
+
+    dbus_g_method_return (context, uids);
+    g_free (uids);
+  }
+}
+
+static void
 impl_AddressBook_Book_modifyContact (EDataBook *book, const char *IN_vcard, DBusGMethodInvocation *context)
 {
   OperationData *op;
Index: evolution-data-server/addressbook/libedata-book-dbus/e-data-book.h
===================================================================
--- evolution-data-server.orig/addressbook/libedata-book-dbus/e-data-book.h	2008-11-18 16:18:01.000000000 +0100
+++ evolution-data-server/addressbook/libedata-book-dbus/e-data-book.h	2008-11-18 16:18:28.000000000 +0100
@@ -69,6 +69,7 @@
 void e_data_book_respond_modify (EDataBook *book, guint32 opid, EDataBookStatus status, EContact *contact);
 void e_data_book_respond_modify_contacts (EDataBook *book, guint32 opid, EDataBookStatus status, GList *contacts);
 void e_data_book_respond_create (EDataBook *book, guint32 opid, EDataBookStatus status, EContact *contact);
+void e_data_book_respond_create_contacts (EDataBook *book, guint32 opid, EDataBookStatus status, GList *contacts);
 void e_data_book_respond_get_changes (EDataBook *book, guint32 opid, EDataBookStatus status, GList *changes);
 void e_data_book_respond_authenticate_user (EDataBook *book, guint32 opid, EDataBookStatus status);
 void e_data_book_respond_get_supported_fields (EDataBook *book, guint32 opid, EDataBookStatus status, GList *fields);
Index: evolution-data-server/addressbook/libedata-book-dbus/e-data-book.xml
===================================================================
--- evolution-data-server.orig/addressbook/libedata-book-dbus/e-data-book.xml	2008-11-18 16:18:27.000000000 +0100
+++ evolution-data-server/addressbook/libedata-book-dbus/e-data-book.xml	2008-11-18 16:18:28.000000000 +0100
@@ -58,6 +58,13 @@
       <arg name="uid" type="s" direction="out"/>
     </method>
 
+    <method name="addContacts">
+      <annotation name="org.freedesktop.DBus.GLib.CSymbol" value="impl_AddressBook_Book_addContacts"/>
+      <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
+      <arg name="vcards" type="as" direction="in"/>
+      <arg name="uids" type="as" direction="out"/>
+    </method>
+
     <method name="removeContacts">
       <annotation name="org.freedesktop.DBus.GLib.CSymbol" value="impl_AddressBook_Book_removeContacts"/>
       <annotation name="org.freedesktop.DBus.GLib.Async" value=""/>
