Index: evolution-data-server/addressbook/libebook-dbus/e-book-view.c
===================================================================
--- evolution-data-server.orig/addressbook/libebook-dbus/e-book-view.c	2008-06-24 17:38:41.000000000 +0200
+++ evolution-data-server/addressbook/libebook-dbus/e-book-view.c	2008-06-24 17:39:05.000000000 +0200
@@ -37,6 +37,7 @@
 
   gboolean running : 1;
   gboolean freezable : 1;
+  gboolean parse_vcards : 1;
 };
 
 enum {
@@ -122,6 +123,7 @@
   priv->running = FALSE;
 
   view->priv = priv;
+  priv->parse_vcards = TRUE;
 }
 
 static void
@@ -133,6 +135,7 @@
   g_signal_emit (book_view, signals[STATUS_MESSAGE], 0, message);
 }
 
+#include <string.h>
 static void
 contacts_added_cb (DBusGProxy *proxy, const char **vcards, EBookView *book_view)
 {
@@ -142,15 +145,19 @@
   if (!book_view->priv->running)
     return;
 
-  for (p = vcards; *p; p++) {
-    contacts = g_list_prepend (contacts, e_contact_new_from_vcard (*p));
-  }
-  contacts = g_list_reverse (contacts);
+  if (!book_view->priv->parse_vcards) {
+    g_signal_emit (book_view, signals[CONTACTS_ADDED], 0, vcards);
+  } else {
+    for (p = vcards; *p; p+= 2) {
+      contacts = g_list_prepend (contacts, e_contact_new_from_vcard (p[1]));
+    }
+    contacts = g_list_reverse (contacts);
 
-  g_signal_emit (book_view, signals[CONTACTS_ADDED], 0, contacts);
+    g_signal_emit (book_view, signals[CONTACTS_ADDED], 0, contacts);
 
-  g_list_foreach (contacts, (GFunc)g_object_unref, NULL);
-  g_list_free (contacts);
+    g_list_foreach (contacts, (GFunc)g_object_unref, NULL);
+    g_list_free (contacts);
+  }
 }
 
 static void
@@ -162,15 +169,19 @@
   if (!book_view->priv->running)
     return;
 
-  for (p = vcards; *p; p++) {
-    contacts = g_list_prepend (contacts, e_contact_new_from_vcard (*p));
-  }
-  contacts = g_list_reverse (contacts);
+  if (!book_view->priv->parse_vcards) {
+    g_signal_emit (book_view, signals[CONTACTS_CHANGED], 0, vcards);
+  } else {
+    for (p = vcards; *p; ++p)
+      contacts = g_list_prepend (contacts, e_contact_new_from_vcard (*p));
+
+    contacts = g_list_reverse (contacts);
 
-  g_signal_emit (book_view, signals[CONTACTS_CHANGED], 0, contacts);
+    g_signal_emit (book_view, signals[CONTACTS_CHANGED], 0, contacts);
 
-  g_list_foreach (contacts, (GFunc)g_object_unref, NULL);
-  g_list_free (contacts);
+    g_list_foreach (contacts, (GFunc)g_object_unref, NULL);
+    g_list_free (contacts);
+  }
 }
 
 static void
@@ -182,15 +193,19 @@
   if (!book_view->priv->running)
     return;
 
-  for (p = ids; *p; p++) {
-    list = g_list_prepend (list, (char*)*p);
-  }
-  list = g_list_reverse (list);
+  if (!book_view->priv->parse_vcards) {
+    g_signal_emit (book_view, signals[CONTACTS_REMOVED], 0, ids);
+  } else {
+    for (p = ids; *p; p++) {
+      list = g_list_prepend (list, (char*)*p);
+    }
+    list = g_list_reverse (list);
 
-  g_signal_emit (book_view, signals[CONTACTS_REMOVED], 0, list);
+    g_signal_emit (book_view, signals[CONTACTS_REMOVED], 0, list);
 
-  /* No need to free the values, our caller will */
-  g_list_free (list);
+    /* No need to free the values, our caller will */
+    g_list_free (list);
+  }
 }
 
 static void
@@ -369,3 +384,29 @@
     }
   }
 }
+
+/**
+ * e_book_view_set_parse_vcards:
+ * @book_view: an #EBookView
+ * @parse_vcards: whether to parse the vcards into #EContact objects
+ *
+ * Tells the @book_view how to send vCards in its signals. When
+ * @parse_vcards is %FALSE the unparsed vCards are emitted as %NULL terminated
+ * array of strings. The receiver is responsible for parsing them. When
+ * passing %TRUE a #GList of #EContact instances is emitted. This is the
+ * default behavior.
+ **/
+void
+e_book_view_set_parse_vcards (EBookView *book_view, gboolean parse_vcards)
+{
+  g_return_if_fail (E_IS_BOOK_VIEW (book_view));
+  book_view->priv->parse_vcards = parse_vcards;
+}
+
+gboolean
+e_book_view_get_parse_vcards (EBookView *book_view)
+{
+  g_return_val_if_fail (E_IS_BOOK_VIEW (book_view), TRUE);
+  return book_view->priv->parse_vcards;
+}
+
Index: evolution-data-server/addressbook/libebook-dbus/e-book-view.h
===================================================================
--- evolution-data-server.orig/addressbook/libebook-dbus/e-book-view.h	2008-06-24 17:38:41.000000000 +0200
+++ evolution-data-server/addressbook/libebook-dbus/e-book-view.h	2008-06-24 17:39:05.000000000 +0200
@@ -77,6 +77,9 @@
 void               e_book_view_set_freezable          (EBookView *book_view, gboolean freezable);
 gboolean           e_book_view_is_freezable           (EBookView *book_view);
 
+void               e_book_view_set_parse_vcards       (EBookView *book_view, gboolean emit_vcards);
+gboolean           e_book_view_get_parse_vcards       (EBookView *book_view);
+
 void               e_book_view_set_sort_order         (EBookView *book_view, const gchar *query_term);
 
 G_END_DECLS
Index: evolution-data-server/addressbook/libedata-book-dbus/e-data-book-view.c
===================================================================
--- evolution-data-server.orig/addressbook/libedata-book-dbus/e-data-book-view.c	2008-06-24 17:38:41.000000000 +0200
+++ evolution-data-server/addressbook/libedata-book-dbus/e-data-book-view.c	2008-06-24 17:39:05.000000000 +0200
@@ -515,11 +515,12 @@
 notify_add (EDataBookView *view, const char *id, char *vcard)
 {
   EDataBookViewPrivate *priv = view->priv;
+  gchar *tmp;
+
   send_pending_changes (view);
   send_pending_removes (view);
 
-  if (priv->adds->len == THRESHOLD) {
-
+  if (priv->adds->len == 2 * THRESHOLD) {
     if (priv->freezable)
     {
       g_mutex_lock (priv->thaw_lock);
@@ -531,7 +532,14 @@
       send_pending_adds (view);
     }
   }
+
+  /* Assigning to some temporary variable since the g_array_append_val() macro
+   * requires a lvalue for its value argument. */
+  tmp = g_strdup (id);
+
+  g_array_append_val (priv->adds, tmp);
   g_array_append_val (priv->adds, vcard);
+
   g_hash_table_insert (priv->ids, g_strdup (id),
                        GUINT_TO_POINTER (1));
 }
